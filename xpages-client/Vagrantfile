# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

ENV['VAGRANT_DEFAULT_PROVIDER'] ||= 'docker'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # config.vm.box_check_update = false

  config.vm.define "mysql" do |mysql|
    mysql.vm.provider "docker" do |d|
      d.image = "mysql"
      d.name = "xpages-mysql"
      d.ports = ["3306:3306"]
      d.env = {
        'MYSQL_ROOT_PASSWORD' => 'root',
        'MYSQL_USER' => 'xpages',
        'MYSQL_PASSWORD' => 'xpages',
        'MYSQL_DATABASE' => 'xpages'
      }
    end
  end


  #config.vm.provision "docker", run: "always" do |d|
  #  d.pull_images "mysql"
  #  d.run "mysql", 
  #    auto_assign_name: false,
  #    daemonize: true,
  #    args: "-name lettr-mysql -e MYSQL_ROOT_PASSWORD=lettr -e MYSQL_USER=lettr -e MYSQL_DATABASE=lettr"
  #end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 3306, host: 3306

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

end
